package org.parcore.api.client.endpoints;

import org.parcore.api.client.async.ApiCallback;
import org.parcore.api.client.utilities.ApiClient;
import org.parcore.api.client.utilities.ApiException;
import org.parcore.api.client.utilities.ApiResponse;
import org.parcore.api.client.utilities.Pair;
import org.parcore.api.client.utilities.ProgressRequestBody;
import org.parcore.api.client.utilities.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.parcore.domain.PreservationActionType;
import org.parcore.domain.PreservationActionTypes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * PAR API
 * <p>
 * PreservationActionTypesApiImpl
 * <p>
 * Client implementation for the Preservation Action Types PAR Core Entity endpoint
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
public class PreservationActionTypesApiImpl implements PreservationActionTypesApi {
    private ApiClient apiClient;

    //by default GET operations should be unauthenticated
    private String[] localVarAuthNames = new String[]{};


    /**
     * Constructor using a specific client
     *
     * @param apiClient Client Object to use
     */
    public PreservationActionTypesApiImpl(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Constructor to allow for the specification of authorization schemes to use for GET calls.
     *
     * @param apiClient Client
     * @param authNames List of authz schemes
     */
    public PreservationActionTypesApiImpl(ApiClient apiClient, String[] authNames) {
        this(apiClient);
        this.localVarAuthNames = authNames;
    }

    /**
     * Build call for getPreservationActionTypes
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call preservationActionTypesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // create path and map variables
        String localVarPath = "/preservation_action_types";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, null, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call preservationActionTypesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return preservationActionTypesGetCall(progressListener, progressRequestListener);
    }

    @Override
    public PreservationActionTypes getPreservationActionTypes() throws ApiException {
        ApiResponse<PreservationActionTypes> resp = getPreservationActionTypesApiResponse();
        return resp.getData();
    }

    @Override
    public ApiResponse<PreservationActionTypes> getPreservationActionTypesApiResponse() throws ApiException {
        com.squareup.okhttp.Call call = preservationActionTypesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PreservationActionTypes>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @Override
    public void getPreservationActionTypesAsync(final ApiCallback<PreservationActionTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = preservationActionTypesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PreservationActionTypes>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
    }

    /**
     * Build call for getPreservationActionTypeById
     *
     * @param id                      Unique identifier for the preservation action type to retrieve. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call preservationActionTypesIdGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        //TODO: ID is not being escaped for URL encoding. This is because the "/" character is valid in IDs and was being escaped. This might need further thought
        // create path and map variables
        String localVarPath = "/preservation_action_types/{id}"
                .replaceAll("\\{" + "id" + "\\}", id);

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, null, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call preservationActionTypesIdGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPreservationActionTypeById(Async)");
        }
        return preservationActionTypesIdGetCall(id, progressListener, progressRequestListener);
    }

    @Override
    public PreservationActionType getPreservationActionTypeById(String id) throws ApiException {
        ApiResponse<PreservationActionType> resp = updatePreservationActionTypeByIdApiResponse(id);
        return resp.getData();
    }

    @Override
    public ApiResponse<PreservationActionType> updatePreservationActionTypeByIdApiResponse(String id) throws ApiException {
        com.squareup.okhttp.Call call = preservationActionTypesIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PreservationActionType>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @Override
    public void getPreservationActionTypeByIdAsync(String id, final ApiCallback<PreservationActionType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = preservationActionTypesIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PreservationActionType>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
    }

    /**
     * Build call for updatePreservationActionType
     *
     * @param id                      Unique identifier for the existing preservation action type to update (required)
     * @param data                    (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call preservationActionTypesIdPutCall(String id, PreservationActionType data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        //TODO: ID is not being escaped for URL encoding. This is because the "/" character is valid in IDs and was being escaped. This might need further thought
        // create path and map variables
        String localVarPath = "/preservation_action_types/{id}"
                .replaceAll("\\{" + "id" + "\\}", id);

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"authorization"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, data, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call preservationActionTypesIdPutValidateBeforeCall(String id, PreservationActionType data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePreservationActionType(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updatePreservationActionType(Async)");
        }
        return preservationActionTypesIdPutCall(id, data, progressListener, progressRequestListener);
    }

    @Override
    public PreservationActionType updatePreservationActionType(String id, PreservationActionType data) throws ApiException {
        ApiResponse<PreservationActionType> resp = updatePreservationActionTypeByIdApiResponse(id, data);
        return resp.getData();
    }

    @Override
    public ApiResponse<PreservationActionType> updatePreservationActionTypeByIdApiResponse(String id, PreservationActionType data) throws ApiException {
        com.squareup.okhttp.Call call = preservationActionTypesIdPutValidateBeforeCall(id, data, null, null);
        Type localVarReturnType = new TypeToken<PreservationActionType>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @Override
    public void updatePreservationActionTypeAsync(String id, PreservationActionType data, final ApiCallback<PreservationActionType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = preservationActionTypesIdPutValidateBeforeCall(id, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PreservationActionType>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
    }

    /**
     * Build call for createPreservationActionType
     *
     * @param data                    (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call preservationActionTypesPostCall(PreservationActionType data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        //TODO: ID is not being escaped for URL encoding. This is because the "/" character is valid in IDs and was being escaped. This might need further thought
        // create path and map variables
        String localVarPath = "/preservation_action_types";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"authorization"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, data, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call preservationActionTypesPostValidateBeforeCall(PreservationActionType data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createPreservationActionType(Async)");
        }
        return preservationActionTypesPostCall(data, progressListener, progressRequestListener);
    }

    @Override
    public PreservationActionType createPreservationActionType(PreservationActionType data) throws ApiException {
        ApiResponse<PreservationActionType> resp = createPreservationActionTypeApiResponse(data);
        return resp.getData();
    }

    @Override
    public ApiResponse<PreservationActionType> createPreservationActionTypeApiResponse(PreservationActionType data) throws ApiException {
        com.squareup.okhttp.Call call = preservationActionTypesPostValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<PreservationActionType>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @Override
    public void createPreservationActionTypeAsync(PreservationActionType data, final ApiCallback<PreservationActionType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = preservationActionTypesPostValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PreservationActionType>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
    }
}
