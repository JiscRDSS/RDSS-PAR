package org.parcore.api.client.endpoints;

import org.parcore.api.client.async.ApiCallback;
import org.parcore.api.client.utilities.ApiException;
import org.parcore.domain.Tool;
import org.parcore.domain.Tools;

/**
 * PAR API
 * <p>
 * ToolsApi
 * <p>
 * Client interface for the Tools PAR Core Entity endpoint
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
@SuppressWarnings("unused")
public interface ToolsApi {

    /**
     * Retrieve all tools
     *
     * @return Tools wrapper of all tools
     * @throws ApiException on error
     */
    Tools getAllTools() throws ApiException;

    /**
     * Retrieve a paged list of all tools
     *
     * @param offset Offset from which to start the list
     * @param limit  Maximum number of tools to return
     * @return Tools wrapper of up to limit tools
     * @throws ApiException on error
     */
    Tools getPagedListOfTools(Integer offset, Integer limit) throws ApiException;

    /**
     * Retrieve a paged list of tools modified between given dates
     *
     * @param modifiedAfter  Filter the tools to return only the ones having a localLastModifiedDate value GREATER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time. (optional)
     * @param modifiedBefore Filter the tools to return only the ones having a localLastModifiedDate value LOWER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time (optional)
     * @param offset         Offset from which to start the list
     * @param limit          Maximum number of tools to return
     * @return Tools wrapper of up to limit tools
     * @throws ApiException on error
     */
    Tools getPagedListOfToolsByModifiedDate(String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException;

    /**
     * Retrieve all tools modified between given dates
     *
     * @param modifiedAfter  Filter the tools to return only the ones having a localLastModifiedDate value GREATER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time. (optional)
     * @param modifiedBefore Filter the tools to return only the ones having a localLastModifiedDate value LOWER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time (optional)
     * @return Tools wrapper of the tools
     * @throws ApiException on error
     */
    Tools getToolsByModifiedDate(String modifiedAfter, String modifiedBefore) throws ApiException;

    /**
     * Retrieve all tools modified between given dates (asynchronously)
     *
     * @param modifiedAfter  Filter the tools to return only the ones having a localLastModifiedDate value GREATER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time. (optional)
     * @param modifiedBefore Filter the tools to return only the ones having a localLastModifiedDate value LOWER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time (optional)
     * @param callback       The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void getToolsAsync(String modifiedAfter, String modifiedBefore, ApiCallback<Tools> callback) throws ApiException;

    /**
     * Retrieve a specific tool
     *
     * @param id Identifier
     * @return Tool
     * @throws ApiException on error
     */
    Tool getToolById(String id) throws ApiException;

    /**
     * @param id       Identifier
     * @param callback The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void getToolByIdAsync(String id, ApiCallback<Tool> callback) throws ApiException;

    /**
     * Update an existing tool. The newly updated tool is returned by the request
     *
     * @param id   Identifier
     * @param data Tool to save
     * @return Tool
     * @throws ApiException on error
     */
    Tool updateTool(String id, Tool data) throws ApiException;

    /**
     * Update an existing tool (asynchronously)
     *
     * @param id       Identifier
     * @param data     Tool to save
     * @param callback The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void updateToolAsync(String id, Tool data, ApiCallback<Tool> callback) throws ApiException;

    /**
     * Create a new tool. The newly created tool is returned by the request.
     *
     * @param data Tool to create
     * @return Tool
     * @throws ApiException on error
     */
    Tool createTool(Tool data) throws ApiException;

    /**
     * Create a new tool asynchronously
     *
     * @param data     Tool to create
     * @param callback The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void createToolAsync(Tool data, ApiCallback<Tool> callback) throws ApiException;
}
