package org.parcore.api.client.utilities;

import java.util.Map;
import java.util.List;

/**
 * PAR API
 * <p>
 * ApiException
 * <p>
 * Exception that may be thrown by the API client as the result of a request. This wraps the server response code and headers
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
public class ApiException extends Exception {
    private int code = 0;
    private Map<String, List<String>> responseHeaders = null;
    private String responseBody = null;

    /**
     * Over-ride constructor
     *
     * @param message Message
     */
    public ApiException(String message) {
        super(message);
    }

    /**
     * Over-ride constructor
     *
     * @param message Message
     * @param cause   Cause
     */
    public ApiException(String message, Throwable cause) {
        super(message, cause);
    }

    /**
     * Over-ride constructor
     *
     * @param cause Cause
     */
    public ApiException(Throwable cause) {
        super(cause);
    }

    /**
     * Constructor with all response data
     *
     * @param message         Message
     * @param cause           Cause
     * @param code            HTTP response code
     * @param responseHeaders HTTP response headers
     * @param responseBody    HTTP response body
     */
    public ApiException(String message, Throwable cause, int code, Map<String, List<String>> responseHeaders, String responseBody) {
        super(message, cause);
        this.code = code;
        this.responseHeaders = responseHeaders;
        this.responseBody = responseBody;
    }

    /**
     * Constructor with no root cause
     *
     * @param message         Message
     * @param code            HTTP response code
     * @param responseHeaders HTTP response headers
     * @param responseBody    HTTP response body
     */
    public ApiException(String message, int code, Map<String, List<String>> responseHeaders, String responseBody) {
        this(message, null, code, responseHeaders, responseBody);
    }

    /**
     * Constructor with no response body
     *
     * @param message         Message
     * @param cause           Cause
     * @param code            HTTP response code
     * @param responseHeaders HTTP response headers
     */
    public ApiException(String message, Throwable cause, int code, Map<String, List<String>> responseHeaders) {
        this(message, cause, code, responseHeaders, null);
    }

    /**
     * Constructor with response data only
     *
     * @param code            HTTP response code
     * @param responseHeaders HTTP response headers
     * @param responseBody    HTTP response body
     */
    public ApiException(int code, Map<String, List<String>> responseHeaders, String responseBody) {
        this(null, null, code, responseHeaders, responseBody);
    }

    /**
     * Constructor with message and response status
     *
     * @param message Message
     * @param code    HTTP response code
     */
    public ApiException(int code, String message) {
        super(message);
        this.code = code;
    }

    /**
     * Get the HTTP status code.
     *
     * @return HTTP status code
     */
    public int getCode() {
        return code;
    }

    /**
     * Get the HTTP response headers.
     *
     * @return A map of list of string
     */
    public Map<String, List<String>> getResponseHeaders() {
        return responseHeaders;
    }

    /**
     * Get the HTTP response body.
     *
     * @return Response body in the form of string
     */
    public String getResponseBody() {
        return responseBody;
    }
}
