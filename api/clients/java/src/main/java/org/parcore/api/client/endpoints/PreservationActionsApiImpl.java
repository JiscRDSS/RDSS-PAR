package org.parcore.api.client.endpoints;

import org.parcore.api.client.async.ApiCallback;
import org.parcore.api.client.utilities.*;
import org.parcore.domain.PreservationAction;
import org.parcore.domain.PreservationActions;

import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * PAR API
 * <p>
 * PreservationActionsApiImpl
 * <p>
 * Client implementation for the Preservation Actions PAR Core Entity endpoint
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
@SuppressWarnings({"unused", "WeakerAccess"})
public class PreservationActionsApiImpl extends AbstractApiCallImpl<PreservationActions, PreservationAction> implements PreservationActionsApi {

    /**
     * Default Constructor
     *
     * @param apiClient Configured client
     */
    public PreservationActionsApiImpl(ApiClient apiClient) {
        super(apiClient, "/preservation-actions", PreservationActions.class, PreservationAction.class);
    }

    /**
     * Constructor allowing for authenticated GETs
     *
     * @param apiClient Configured client
     * @param authNames Authentication/Authorization schema to use
     */
    public PreservationActionsApiImpl(ApiClient apiClient, String[] authNames) {
        this(apiClient);
        this.localVarAuthNames = authNames;
    }

    @Override
    public PreservationActions getAllPreservationActions() throws ApiException {
        return getListingApiResponse(null, null, null, null, Collections.emptyMap()).getData();
    }

    @Override
    public PreservationActions getPagedListOfPreservationActions(Integer offset, Integer limit) throws ApiException {
        return getListingApiResponse(null, null, offset, limit, Collections.emptyMap()).getData();
    }

    @Override
    public PreservationActions getPagedListOfPreservationActionsByModifiedDate(String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        return getListingApiResponse(modifiedAfter, modifiedBefore, offset, limit, Collections.emptyMap()).getData();
    }

    @Override
    public PreservationActions getPreservationActionsByModifiedDate(String modifiedAfter, String modifiedBefore) throws ApiException {
        return getListingApiResponse(modifiedAfter, modifiedBefore, null, null, Collections.emptyMap()).getData();
    }

    @Override
    public PreservationActions getPreservationActionsByTools(List<String> toolIds, String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        return getListingApiResponse(modifiedAfter, modifiedBefore, offset, limit, getToolsFilterHeader(toolIds)).getData();
    }

    @Override
    public PreservationActions getPreservationActionsByTypes(List<String> preservationActionTypeIds, String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        return getListingApiResponse(modifiedAfter, modifiedBefore, offset, limit, getTypesFilterHeader(preservationActionTypeIds)).getData();
    }

    @Override
    public PreservationActions getPreservationActionsByToolsAndTypes(List<String> toolIds, List<String> preservationActionTypeIds, String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        Map<String, String> headers = getToolsFilterHeader(toolIds);
        headers.putAll(getTypesFilterHeader(preservationActionTypeIds));
        return getListingApiResponse(modifiedAfter, modifiedBefore, offset, limit, headers).getData();
    }

    @Override
    public void getPreservationActionsAsync(List<String> toolIds, List<String> preservationActionTypeIds, String modifiedAfter, String modifiedBefore, ApiCallback<PreservationActions> callback) throws ApiException {
        Map<String, String> headers = getToolsFilterHeader(toolIds);
        headers.putAll(getTypesFilterHeader(preservationActionTypeIds));
        getListingAsync(null, modifiedAfter, modifiedBefore, headers, callback);
    }

    @Override
    public PreservationAction getPreservationActionById(String id) throws ApiException {
        return getEntity(id, null).getData();
    }

    @Override
    public void getPreservationActionByIdAsync(String id, ApiCallback<PreservationAction> callback) throws ApiException {
        getEntityAsync(id, null, callback);
    }

    @Override
    public PreservationAction updatePreservationAction(String id, PreservationAction data) throws ApiException {
        return updateEntity(id, data).getData();
    }

    @Override
    public void updatePreservationActionAsync(String id, PreservationAction data, ApiCallback<PreservationAction> callback) throws ApiException {
        updateEntityAsync(id, data, callback);
    }

    @Override
    public PreservationAction createPreservationAction(PreservationAction data) throws ApiException {
        return createNewEntity(data).getData();
    }

    @Override
    public void createPreservationActionAsync(PreservationAction data, ApiCallback<PreservationAction> callback) throws ApiException {
        createNewEntityAsync(data, callback);
    }

    // --- Private internal methods

    private ApiResponse<PreservationActions> getListingApiResponse(String modifiedAfter, String modifiedBefore, Integer offset, Integer limit, Map<String, String> headers) throws ApiException {
        return getListing(null, modifiedAfter, modifiedBefore, offset, limit, headers);
    }

    private Map<String, String> getToolsFilterHeader(List<String> toolIds) {
        return getFilterHeader("tool", toolIds);
    }

    private Map<String, String> getTypesFilterHeader(List<String> preservationActionTypeIds) {
        return getFilterHeader("preservation_action_type", preservationActionTypeIds);
    }

}
