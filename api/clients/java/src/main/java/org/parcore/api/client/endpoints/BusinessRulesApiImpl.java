package org.parcore.api.client.endpoints;

import org.parcore.api.client.async.ApiCallback;
import org.parcore.api.client.utilities.AbstractApiCallImpl;
import org.parcore.api.client.utilities.ApiClient;
import org.parcore.api.client.utilities.ApiException;
import org.parcore.api.client.utilities.ApiResponse;
import org.parcore.domain.BusinessRule;
import org.parcore.domain.BusinessRules;

import java.util.Collections;

/**
 * PAR API
 * <p>
 * BusinessRulesApiImpl
 * <p>
 * Typed implementation of the AbstractApiCall providing methods to use PAR Core BusinessRule entity
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
@SuppressWarnings({"unused", "WeakerAccess"})
public class BusinessRulesApiImpl extends AbstractApiCallImpl<BusinessRules, BusinessRule> implements BusinessRulesApi {

    /**
     * Default Constructor
     *
     * @param apiClient Configured client
     */
    public BusinessRulesApiImpl(ApiClient apiClient) {
        super(apiClient, "/business-rules", BusinessRules.class, BusinessRule.class);
    }

    /**
     * Constructor allowing for authenticated GETs
     *
     * @param apiClient Configured client
     * @param authNames Authentication/Authorization schema to use
     */
    public BusinessRulesApiImpl(ApiClient apiClient, String[] authNames) {
        this(apiClient);
        this.localVarAuthNames = authNames;
    }

    @Override
    public BusinessRules getAllBusinessRules() throws ApiException {
        return getListingApiResponse(null, null, null, null).getData();
    }

    @Override
    public BusinessRules getPagedListOfBusinessRules(Integer offset, Integer limit) throws ApiException {
        return getListingApiResponse(null, null, offset, limit).getData();
    }

    @Override
    public BusinessRules getPagedListOfBusinessRulesByModifiedDate(String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        return getListingApiResponse(modifiedAfter, modifiedBefore, offset, limit).getData();
    }

    @Override
    public BusinessRules getBusinessRulesByModifiedDate(String modifiedAfter, String modifiedBefore) throws ApiException {
        return getListingApiResponse(modifiedAfter, modifiedBefore, null, null).getData();
    }

    @Override
    public void getBusinessRulesAsync(String modifiedAfter, String modifiedBefore, ApiCallback<BusinessRules> callback) throws ApiException {
        getListingAsync(null, modifiedAfter, modifiedBefore, Collections.emptyMap(), callback);
    }

    @Override
    public BusinessRule getBusinessRuleById(String id) throws ApiException {
        return getEntity(id, null).getData();
    }

    @Override
    public void getBusinessRuleByIdAsync(String id, ApiCallback<BusinessRule> callback) throws ApiException {
        getEntityAsync(id, null, callback);
    }

    @Override
    public BusinessRule updateBusinessRule(String id, BusinessRule data) throws ApiException {
        return updateEntity(id, data).getData();
    }

    @Override
    public void updateBusinessRuleAsync(String id, BusinessRule data, ApiCallback<BusinessRule> callback) throws ApiException {
        updateEntityAsync(id, data, callback);
    }

    @Override
    public BusinessRule createBusinessRule(BusinessRule data) throws ApiException {
        return createNewEntity(data).getData();
    }

    @Override
    public void createBusinessRuleAsync(BusinessRule data, ApiCallback<BusinessRule> callback) throws ApiException {
        createNewEntityAsync(data, callback);
    }

    private ApiResponse<BusinessRules> getListingApiResponse(String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        return getListing(null, modifiedAfter, modifiedBefore, offset, limit, Collections.emptyMap());
    }
}
