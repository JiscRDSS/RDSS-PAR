package org.parcore.api.client.endpoints;

import org.parcore.api.client.async.ApiCallback;
import org.parcore.api.client.utilities.ApiException;
import org.parcore.domain.ParProperties;
import org.parcore.domain.ParProperty;

/**
 * PAR API
 * <p>
 * ParPropertiesApi
 * <p>
 * Client interface for the PAR Properties PAR Core Entity endpoint
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
@SuppressWarnings("unused")
public interface ParPropertiesApi {

    /**
     * Retrieve all PAR properties
     *
     * @return ParProperties wrapper of all properties
     * @throws ApiException on error
     */
    ParProperties getAllProperties() throws ApiException;

    /**
     * Retrieve a paged list of properties
     *
     * @param offset Offset from which to start the list
     * @param limit  Maximum number of formats to return
     * @return ParProperties wrapper of up to limit formats
     * @throws ApiException on error
     */
    ParProperties getPagedListOfProperties(Integer offset, Integer limit) throws ApiException;

    /**
     * Retrieve a paged list of properties modified between the two specified dates
     *
     * @param modifiedAfter  Filter the properties to return only the ones having a localLastModifiedDate value GREATER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time. (optional)
     * @param modifiedBefore Filter the properties to return only the ones having a localLastModifiedDate value LOWER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time (optional)
     * @param offset         Offset from which to start the list
     * @param limit          Maximum number of formats to return
     * @return ParProperties wrapper of up to limit formats
     * @throws ApiException on error
     */
    ParProperties getPagedListofPropertiesByModifiedDate(String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException;

    /**
     * Retrieve all properties modified between the two dates
     *
     * @param modifiedAfter  Filter the properties to return only the ones having a localLastModifiedDate value GREATER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time. (optional)
     * @param modifiedBefore Filter the properties to return only the ones having a localLastModifiedDate value LOWER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time (optional)
     * @return ParProperties wrapper of the properties
     * @throws ApiException on error
     */
    ParProperties getPropertiesByModifiedDate(String modifiedAfter, String modifiedBefore) throws ApiException;

    /**
     * Retrieve all properties modified between the two dates (asynchronously)
     *
     * @param modifiedAfter  Filter the properties to return only the ones having a localLastModifiedDate value GREATER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time. (optional)
     * @param modifiedBefore Filter the properties to return only the ones having a localLastModifiedDate value LOWER than the one passed in. Allowed datetime formats are YYYY-MM-DD\\&#39;T\\&#39;hh\\:mm\\:ssTZD and YYYY-MM-DD. In the second scenario, when the time is not provided, it will be assumed to be 00\\:00\\:00 UTC time (optional)
     * @param callback       The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void getPropertiesAsync(String modifiedAfter, String modifiedBefore, ApiCallback<ParProperties> callback) throws ApiException;

    /**
     * Retrieve a property
     *
     * @param id Unique identifier for the Property to retrieve
     * @return ParProperty
     * @throws ApiException on error
     */
    ParProperty getPropertyById(String id) throws ApiException;

    /**
     * Retrieve a property asynchronously
     *
     * @param id       Unique identifier for the Property to retrieve
     * @param callback The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void getPropertyByIdAsync(String id, ApiCallback<ParProperty> callback) throws ApiException;

    /**
     * Update an existing property. The newly updated ParProperty is returned by the request.
     *
     * @param id   Unique identifier for the Property to update
     * @param data The property as it should be written
     * @return The newly updated property
     * @throws ApiException on error
     */
    ParProperty updateProperty(String id, ParProperty data) throws ApiException;

    /**
     * Update an existing property asynchronously.
     *
     * @param id       Unique identifier for the Property to update
     * @param data     The property as it should be written
     * @param callback The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void updatePropertyAsync(String id, ParProperty data, ApiCallback<ParProperty> callback) throws ApiException;

    /**
     * Create a new property. The newly created property is returned by the request.
     *
     * @param data The property as it should be written
     * @return The newly created property
     * @throws ApiException on error
     */
    ParProperty createProperty(ParProperty data) throws ApiException;

    /**
     * Create a new property asynchronously.
     *
     * @param data     The property as it should be written
     * @param callback The callback to be executed when the API call finishes
     * @throws ApiException on error
     */
    void createPropertyAsync(ParProperty data, ApiCallback<ParProperty> callback) throws ApiException;
}
