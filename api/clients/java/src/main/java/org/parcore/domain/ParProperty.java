package org.parcore.domain;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * PAR API
 * <p>
 * ParProperty
 * <p>
 * Domain model for the ParProperty Core Entity
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
@SuppressWarnings("unused")
public class ParProperty {

    @SerializedName("class")
    private PropertyClass propertyClass = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("equivalentTo")
    private List<String> equivalentTo = null;

    @SerializedName("id")
    private ParIdentifier id = null;

    @SerializedName("localLastModifiedDate")
    private String localLastModifiedDate = null;

    @SerializedName("type")
    private PropertyType propertyType = null;

    @SerializedName("units")
    private String units = null;

    @SerializedName("value")
    private String value = null;

    /**
     * Property Class is the logical type of a specific property falls, e.g. fmt/43 is a file format, MD5 and SHA512 are both checksums, PASS and FAIL are both format validity measures.
     *
     * @return class
     */
    @ApiModelProperty(value = "Property Class is the logical type of a specific property falls, e.g. fmt/43 is a file format, MD5 and SHA512 are both checksums, PASS and FAIL are both format validity measures.")
    public PropertyClass getPropertyClass() {
        return propertyClass;
    }

    public void setPropertyClass(PropertyClass propertyClass) {
        this.propertyClass = propertyClass;
    }

    @ApiModelProperty(value = "A human readable description of the property")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public void addEquivalentToItem(String equivalentToItem) {
        if (this.equivalentTo == null) {
            this.equivalentTo = new ArrayList<>();
        }
        this.equivalentTo.add(equivalentToItem);
    }

    /**
     * Equivalent To allows for assertions that a specific property is equivalent to named properties in other schemas or registries, for example, an Aspect Ration property for a video may be declared to be equivalent to the ebucore:aspectRatio, even if the representation of the measurement is different
     *
     * @return equivalentTo
     **/
    @ApiModelProperty(value = "Equivalent To allows for assertions that a specific property is equivalent to named properties in other schemas or registries, for example, an Aspect Ration property for a video may be declared to be equivalent to the ebucore:aspectRatio, even if the representation of the measurement is different")
    public List<String> getEquivalentTo() {
        return equivalentTo;
    }

    public void setEquivalentTo(List<String> equivalentTo) {
        this.equivalentTo = equivalentTo;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @ApiModelProperty(required = true, value = "")
    public ParIdentifier getId() {
        return id;
    }

    public void setId(ParIdentifier id) {
        this.id = id;
    }

    /**
     * Get localLastModifiedDate
     *
     * @return localLastModifiedDate
     **/
    @ApiModelProperty(value = "")
    public String getLocalLastModifiedDate() {
        return localLastModifiedDate;
    }

    public void setLocalLastModifiedDate(String localLastModifiedDate) {
        this.localLastModifiedDate = localLastModifiedDate;
    }

    /**
     * Property Type is the datatype in which the value of a specific property should be formatted, for example fmt/43, MD5 and SHA512 values are typically strings, validity metrics may be booleans, size measures will be numeric types.
     *
     * @return type
     */
    @ApiModelProperty(value = "Property Type is the datatype in which the value of a specific property should be formatted, for example fmt/43, MD5 and SHA512 values are typically strings, validity metrics may be booleans, size measures will be numeric types.")
    public PropertyType getPropertyType() {
        return propertyType;
    }

    public void setPropertyType(PropertyType propertyType) {
        this.propertyType = propertyType;
    }

    /**
     * Property Units allow for the specification of the units in which the value is given, for example an image size may be given in pixels (px), video bitrates may be specified in bits per second (bps) or kilobits per second (kbps).
     *
     * @return units
     **/
    @ApiModelProperty(value = "Property Units allow for the specification of the units in which the value is given, for example an image size may be given in pixels (px), video bitrates may be specified in bits per second (bps) or kilobits per second (kbps).")
    public String getUnits() {
        return units;
    }

    public void setUnits(String units) {
        this.units = units;
    }

    /**
     * Property Value is the measured value of a specific property for a particular object.
     *
     * @return value
     **/
    @ApiModelProperty(value = "Property Value is the measured value of a specific property for a particular object.")
    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    /**
     * enum to establish controlled vocabulary for property type
     */
    public enum PropertyType {
        @SerializedName("string")
        STRING("string"),
        @SerializedName("boolean")
        BOOLEAN("boolean"),
        @SerializedName("integer")
        INTEGER("integer"),
        @SerializedName("float")
        FLOAT("float"),
        @SerializedName("other")
        OTHER("other");

        private String type;

        PropertyType(String type) {
            this.type = type;
        }

        @Override
        public String toString() {
            return this.type;
        }
    }

    /**
     * enum to establish controlled vocabulary for property class
     */
    public enum PropertyClass {
        @SerializedName("checksum")
        CHECKSUM("checksum"),
        @SerializedName("file format")
        FILEFORMAT("file format"),
        @SerializedName("validity")
        VALIDITY("validity"),
        @SerializedName("size")
        SIZE("size"),
        @SerializedName("rate")
        RATE("rate"),
        @SerializedName("raw")
        RAW("raw"),
        @SerializedName("other")
        OTHER("other");

        private String clzz;

        PropertyClass(String clzz) {
            this.clzz = clzz;
        }

        @Override
        public String toString() {
            return clzz;
        }
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ParProperty parProperty = (ParProperty) o;
        return Objects.equals(this.propertyClass, parProperty.propertyClass) &&
                Objects.equals(this.description, parProperty.description) &&
                Objects.equals(this.equivalentTo, parProperty.equivalentTo) &&
                Objects.equals(this.id, parProperty.id) &&
                Objects.equals(this.localLastModifiedDate, parProperty.localLastModifiedDate) &&
                Objects.equals(this.propertyType, parProperty.propertyType) &&
                Objects.equals(this.units, parProperty.units) &&
                Objects.equals(this.value, parProperty.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(equivalentTo, id, localLastModifiedDate, units, value);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ParProperty {\n");

        sb.append("    class: ").append(toIndentedString(propertyClass)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    equivalentTo: ").append(toIndentedString(equivalentTo)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    localLastModifiedDate: ").append(toIndentedString(localLastModifiedDate)).append("\n");
        sb.append("    type: ").append(toIndentedString(propertyType)).append("\n");
        sb.append("    units: ").append(toIndentedString(units)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
