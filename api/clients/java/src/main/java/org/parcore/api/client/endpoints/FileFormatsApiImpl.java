package org.parcore.api.client.endpoints;

import org.parcore.api.client.async.ApiCallback;
import org.parcore.api.client.utilities.*;

import org.parcore.domain.FileFormat;
import org.parcore.domain.FileFormats;

import java.util.*;

/**
 * PAR API
 * <p>
 * FileFormatsApiImpl
 * <p>
 * Client implementation for the File Formats PAR Core Entity endpoint
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
@SuppressWarnings({"unused", "WeakerAccess"})
public class FileFormatsApiImpl extends AbstractApiCallImpl<FileFormats, FileFormat> implements FileFormatsApi {

    /**
     * Constructor using a specific client
     *
     * @param apiClient Client Object to use
     */
    public FileFormatsApiImpl(ApiClient apiClient) {
        super(apiClient, "/file-formats", FileFormats.class, FileFormat.class);
    }

    /**
     * Constructor to allow for the specification of authorization schemes to use for GET calls.
     *
     * @param apiClient Client
     * @param authNames List of authz schemes
     */
    public FileFormatsApiImpl(ApiClient apiClient, String[] authNames) {
        this(apiClient);
        this.localVarAuthNames = authNames;
    }


    @Override
    public FileFormats getAllFileFormats(Boolean returnSubEntities) throws ApiException {
        return getListApiResponse(returnSubEntities, null, null, null, null).getData();
    }

    @Override
    public FileFormats getPagedListOfFileFormats(Boolean returnSubEntities, Integer offset, Integer limit) throws ApiException {
        return getListApiResponse(returnSubEntities, null, null, offset, limit).getData();
    }

    @Override
    public FileFormats getPagedListOfFileFormatsByModifiedDates(Boolean returnSubEntities, String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        return getListApiResponse(returnSubEntities, modifiedAfter, modifiedBefore, offset, limit).getData();
    }

    @Override
    public FileFormats getFileFormatsByModifiedDates(Boolean returnSubEntities, String modifiedAfter, String modifiedBefore) throws ApiException {
        return getListApiResponse(returnSubEntities, modifiedAfter, modifiedBefore, null, null).getData();
    }

    @Override
    public void getFileFormatsAsync(Boolean returnSubEntities, String modifiedAfter, String modifiedBefore, final ApiCallback<FileFormats> callback) throws ApiException {
        getListingAsync(returnSubEntities, modifiedAfter, modifiedBefore, Collections.emptyMap(), callback);
    }

    @Override
    public FileFormat createFileFormat(FileFormat data, Boolean returnSubEntities) throws ApiException {
        return createFileFormatApiResponse(data, returnSubEntities).getData();
    }

    @Override
    public void createFileFormatAsync(FileFormat data, Boolean returnSubEntities, final ApiCallback<FileFormat> callback) throws ApiException {
        createNewEntityAsync(data, callback);
    }

    @Override
    public FileFormat getFileFormatByPuid(String puid, Boolean returnSubEntities) throws ApiException {
        return getByIdApiResponse(puid, returnSubEntities).getData();
    }

    @Override
    public void getFileFormatByPuidAsync(String puid, Boolean returnSubEntities, final ApiCallback<FileFormat> callback) throws ApiException {
        getEntityAsync(puid, returnSubEntities, callback);
    }

    @Override
    public void updateFileFormatAsync(String puid, FileFormat data, Boolean returnSubEntities, final ApiCallback<FileFormat> callback) throws ApiException {
        updateEntityAsync(puid, data, callback);
    }

    @Override
    public FileFormat updateFileFormat(String puid, FileFormat data, Boolean returnSubEntities) throws ApiException {
        return updateByIdApiResponse(puid, data, returnSubEntities).getData();
    }


    // --- Internal methods calling down to the AbstractClass
    private ApiResponse<FileFormat> getByIdApiResponse(String puid, Boolean returnSubEntities) throws ApiException {
        return getEntity(puid, returnSubEntities);
    }

    private ApiResponse<FileFormats> getListApiResponse(Boolean returnSubEntities, String modifiedAfter, String modifiedBefore, Integer offset, Integer limit) throws ApiException {
        return getListing(returnSubEntities, modifiedAfter, modifiedBefore, offset, limit, Collections.emptyMap());
    }

    private ApiResponse<FileFormat> updateByIdApiResponse(String puid, FileFormat data, Boolean returnSubEntities) throws ApiException {
        return updateEntity(puid, data);
    }

    private ApiResponse<FileFormat> createFileFormatApiResponse(FileFormat data, Boolean returnSubEntities) throws ApiException {
        return createNewEntity(data);
    }
}
