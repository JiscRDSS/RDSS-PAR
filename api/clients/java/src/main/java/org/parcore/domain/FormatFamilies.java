package org.parcore.domain;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * PAR API
 * <p>
 * FormatFamilies
 * <p>
 * Domain model for a list of FormatFamily Core entity objects, as returned by the API
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * This class is based on code auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */
@SuppressWarnings("unused")
@ApiModel(description = "A list of format families")
public class FormatFamilies {
    @SerializedName("formatFamilies")
    private List<FormatFamily> formatFamilies = null;

    public void addFileFormatsItem(FormatFamily formatFamily) {
        if (this.formatFamilies == null) {
            this.formatFamilies = new ArrayList<>();
        }
        this.formatFamilies.add(formatFamily);
    }

    /**
     * Get formatFamilies
     *
     * @return formatFamilies
     **/
    @ApiModelProperty(value = "")
    public List<FormatFamily> getFormatFamilies() {
        if (formatFamilies == null) {
            formatFamilies = new ArrayList<>();
        }
        return formatFamilies;
    }

    public void setFormatFamilies(List<FormatFamily> formatFamilies) {
        this.formatFamilies = formatFamilies;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormatFamilies formatFamilies = (FormatFamilies) o;
        return Objects.equals(this.formatFamilies, formatFamilies.formatFamilies);
    }

    @Override
    public int hashCode() {
        return Objects.hash(formatFamilies);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FormatFamilies {\n");

        sb.append("    formatFamilies: ").append(toIndentedString(formatFamilies)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
